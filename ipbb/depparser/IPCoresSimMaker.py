from __future__ import print_function
# ------------------------------------------------------------------------------

import time
import os
# from ..tools.mentor import autodetect


# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class IPCoresSimMaker(object):

    _compiler='vcom'

    def __init__(self, aPathmaker, aSimlibPath, aTargetSimulator, aSimulator, aExportDir):
        self.pathmaker = aPathmaker
        self.simlibPath = aSimlibPath
        self.targetSimulator = aTargetSimulator
        self.simulator = aSimulator
        self.exportdir = aExportDir


    def write(self, aTarget, aScriptVariables, aComponentPaths, aCommandList, aLibs, aMaps):

        write = aTarget

        write('# Autogenerated project build script')
        write(time.strftime('# %c'))
        write()

        # Hack alert : Alessandro
        write('set xlib_path {0}'.format(self.simlibPath))

        lWorkingDir = os.path.abspath(os.path.join(os.getcwd(), 'top'))

        write('set outputDir {0}'.format(lWorkingDir))
        write('file mkdir $outputDir')

        write('create_project top $outputDir -force'.format(**aScriptVariables))

        write('''
set obj [get_projects top]
set_property "default_lib" "xil_defaultlib" $obj
set_property "simulator_language" "Mixed" $obj
set_property "source_mgmt_mode" "DisplayOnly" $obj
set_property "target_language" "VHDL" $obj
''')

        write('set_property target_simulator ' +
              self.targetSimulator + ' [current_project]')

        write('file mkdir $xlib_path')
        lUnisim_nodebug = aScriptVariables.get('unisim_nodebug')
        if lUnisim_nodebug == '1':  # If the encrypted library uses unisim
            # Yeah... Incorrectly documented by Vivado They change the variable
            # name used for questa on this option only.
            if self.simulator == 'questa':
                write(
                    'config_compile_simlib -cfgopt {questasim.vhdl.unisim: -nodebug}')
            else:
                write(
                    'config_compile_simlib -cfgopt {' + self.simulator + '.vhdl.unisim: -nodebug}')
        write('compile_simlib -simulator ' + self.simulator + ' -directory $xlib_path')
        write(
            'set_property compxlib.{}_compiled_library_dir $xlib_path [current_project]'.format(self.simulator)
            )

        write()
        # write('set f [open 'xil_ip_compile.tcl' w]' )
        for src in reversed(aCommandList['src']):
            lPath, lBasename = os.path.split(src.FilePath)
            lName, lExt = os.path.splitext(lBasename)

            if lExt in ['.xci', '.edn']:
                write(
                    'import_files -norecurse -fileset sources_1 {0}'.format(src.FilePath))
                if lExt == '.xci':
                    write('upgrade_ip [get_ips {0}]'.format(lName))
                    write(
                        'generate_target simulation [get_files {0}]'.format(lBasename)
                        )
        write('set_property top top [get_filesets sim_1]')
        write('export_simulation -force -simulator {} -directory {} -lib_map_path $xlib_path'.format(self.simulator, self.exportdir))
        # write('cd {}'.format(os.path.join(os.getcwd(),'export_sim',self.simulator)))
        # write('exec vsim -c -do compile.do -modelsimini modelsim.ini -do exit')
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
